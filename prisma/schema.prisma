generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url     = env("DATABASE_URL")
}

model User {
    id       Int    @id @default(autoincrement())
    fullName String
    email    String @unique
    password String
    role UserRole @default(USER)
    verified DateTime?

    cart Cart?

    provider   String?
    providerId String?

    createdAt DateTime @default(now())
    updateAt DateTime @updatedAt


    Order Order[]

    VerificationCode VerificationCode?
}

model Category {
    id       Int    @id @default(autoincrement())

    name String
    products Product[]

    createdAt DateTime @default(now())
    updateAt DateTime @updatedAt 
}

model Product {
    id       Int    @id @default(autoincrement())

    name     String
    imageUrl String

    category Category @relation(fields: [categoryId], references: [id])
    categoryId Int

    ingredients Ingredient[]
    items   ProductItem[]

    createdAt DateTime @default(now())
    updateAt DateTime @updatedAt  

    
}

model ProductItem {
    id       Int    @id @default(autoincrement())

    price Int
    size Int?
    pizzaType Int?

    product Product @relation(fields: [productId], references: [id])
    productId Int

    CartItem CartItem[]
}


model Ingredient {
    id       Int    @id @default(autoincrement())

    name String
    price Int
    imageUrl String

    products Product[]

    createdAt DateTime @default(now())
    updateAt DateTime @updatedAt 

    CartItem CartItem[]
}


model Cart {
    id       Int    @id @default(autoincrement())

    user User? @relation(fields: [userId], references: [id])
    userId Int? @unique

    token String

    totalAmount Int @default(0)
    

    createdAt DateTime @default(now())
    updateAt DateTime @updatedAt 

    CartItem CartItem[]
}

model CartItem {
    id Int @id @default(autoincrement())

    productItem ProductItem @relation(fields: [productItemId], references: [id])
    productItemId Int

    cartId Int
    cart   Cart @relation(fields: [cartId], references: [id])


    quantity Int

    ingredients Ingredient[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Order {
    id Int @id @default(autoincrement())

    user User? @relation(fields: [userId], references: [id])
    userId Int?

    token String

    totalAmount Int
    status OrderStatus
    paymentId String?

    items Json

    fullName String
    email    String 
    phone String
    address String
    comment String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model VerificationCode {
    id Int @id @default(autoincrement())

    user User @relation(fields: [userId], references: [id])
    userId Int @unique

    code String 

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

}

enum OrderStatus {
    PENDING
    SUCCEEDED
    CANCELLED
}

enum UserRole {
    USER
    ADMIN
}